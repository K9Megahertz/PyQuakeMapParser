import sys

from Vector3 import Vector3
from Tokenizer import Tokenizer
from Tokenizer import Token
from EntityProperty import EntityProperty
from Entity import Entity
from MapBrush import MapBrush
from MapBrushFace import MapBrushFace
from Plane import Plane
from QuakeMapFile import QuakeMapFile


#//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#//
#//  Class QuakeMapFileReader()
#//
#//
#//
#//
#//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class QuakeMapFileReader:

    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Class CTORS/DTORS()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    def __init__(self):
        self.tokenizer = None
        self.currentToken = None
        self.file = None
        self.fileSize = 0
        
        


    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method readQuakeMapFile()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    def readQuakeMapFile(self, fileName):

        self.file =  open(fileName, "r")
        self.fileSize = len(self.file.read())
        self.file.seek(0)  # Reset the file pointer to the beginning
        self.tokenizer = Tokenizer(self.file, self.fileSize)

        self.currentToken = self.tokenizer.getNextToken()

        qmf = QuakeMapFile()
        
        while not self.isCurrentTokenType(Token.TokenType.TOKEN_EOF):            

            if self.isCurrentTokenType(Token.TokenType.TOKEN_LBRACE):
                print("Reading Entity: " + str(len(qmf.entities)))
                e = self.readEntity()
                qmf.entities.append(e)
            else:
                print("Was expecting {")

        return qmf


    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method eatToken()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    def eatToken(self, tokenType):

        if (tokenType != Token.TokenType.TOKEN_NULL):
            if (self.currentToken.tokenType != tokenType):
                print("ERROR")
                sys.exit()

        self.currentToken = self.tokenizer.getNextToken()

    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method isCurrentTokenType()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    def isCurrentTokenType(self, tokenType):

        if (self.currentToken.tokenType == tokenType):
            return True                          #yes	
        return False                             #no


    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method readEntity()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    def readEntity(self):
        self.eatToken(Token.TokenType.TOKEN_LBRACE)

        entity = Entity()

        while not self.isCurrentTokenType(Token.TokenType.TOKEN_RBRACE):

            if self.isCurrentTokenType(Token.TokenType.TOKEN_LBRACE):
                brush = self.readBrush()
                entity.mapBrushSet.append(brush)
            
            elif self.isCurrentTokenType(Token.TokenType.TOKEN_STRING):
                entityProperty = self.readProperty()
                entity.propertySet.append(entityProperty)
            
            else:
                if self.isCurrentTokenType(Token.TokenType.TOKEN_EOF):
                    print("ERRROR")
                else:
                    print("Unexpected Token")

                sys.exit()

        self.eatToken(Token.TokenType.TOKEN_RBRACE)

        return entity





    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method readBrush()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    def readBrush(self):

        mapbrush = MapBrush()

        self.eatToken(Token.TokenType.TOKEN_LBRACE)

        while not self.isCurrentTokenType(Token.TokenType.TOKEN_RBRACE):
            if self.isCurrentTokenType(Token.TokenType.TOKEN_LPAREN):
                mapbrushface = self.readMapBrushFace()
                mapbrush.facelist.append(mapbrushface)
            else:
                print("Unexpected token found")
                sys.exit()


        self.eatToken(Token.TokenType.TOKEN_RBRACE);

        return mapbrush



    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method readMapBrushFace()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    def readMapBrushFace(self):       
        
        texname = ""

        planepoint0 = self.readVector3()
        planepoint1 = self.readVector3()
        planepoint2 = self.readVector3()
        
        t1 = planepoint0 - planepoint1
        t2 = planepoint2 - planepoint1

        plane = Plane(planepoint0, planepoint1, planepoint2)

        self.tokenizer.enable_whitespace()

        while not self.isCurrentTokenType(Token.TokenType.TOKEN_WHITESPACE):
            texname += self.currentToken.value
            self.eatToken(Token.TokenType.TOKEN_NULL)

        self.eatToken(Token.TokenType.TOKEN_WHITESPACE)

        self.tokenizer.disable_whitespace()

        texoffsu = self.readSignedInt()
        texoffsv = self.readSignedInt()
        texangle = self.readSignedInt()


        uscale = self.readSignedFloat()
        vscale = self.readSignedFloat()


        return MapBrushFace(plane, texname, texoffsu, texoffsv, texangle, uscale, vscale)

        


    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method readMapBrushFace()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    def readVector3(self):

        self.eatToken(Token.TokenType.TOKEN_LPAREN)

        val1 = self.readSignedInt()
        val2 = self.readSignedInt()
        val3 = self.readSignedInt()

        self.eatToken(Token.TokenType.TOKEN_RPAREN)

        return Vector3(val1,val2,val3)



    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method readSignedInt()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    def readSignedInt(self):

        negative = False

        if self.isCurrentTokenType(Token.TokenType.TOKEN_MINUS):
            negative = True
            self.eatToken(Token.TokenType.TOKEN_MINUS)

        if self.isCurrentTokenType(Token.TokenType.TOKEN_INT):
            
            value = int(self.currentToken.value)
            if negative:
                value *= -1

            self.eatToken(Token.TokenType.TOKEN_INT)

            return value


    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method readProperty()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    def readProperty(self):
        string1 = self.readString()
        string2 = self.readString()

        return EntityProperty(string1, string2)



    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method readString()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    def readString(self):
        value = self.currentToken.value
        self.eatToken(Token.TokenType.TOKEN_STRING)
        return value


    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method readSignedFloat()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    def readSignedFloat(self):


        negative = False

        if self.isCurrentTokenType(Token.TokenType.TOKEN_MINUS):
            self.eatToken(Token.TokenType.TOKEN_MINUS)
            negative = True

        intpart = self.currentToken.value
        self.eatToken(Token.TokenType.TOKEN_INT)

        self.eatToken(Token.TokenType.TOKEN_PERIOD)
        
        fracpart = self.currentToken.value
        self.eatToken(Token.TokenType.TOKEN_INT)

        value = float(intpart + "." + fracpart)

        if negative:
            value = value * -1

        return value


        