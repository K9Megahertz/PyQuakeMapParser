#//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#//
#//  Class Plane()
#//
#//
#//
#//
#//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Plane:
    __slots__ = ['planepts', 'normal', 'dist']


    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Class CTORS/DTORS()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    def __init__ (self, point0, point1, point2):
        self.planepts = [point0, point1, point2]
        self.normal = ((point0 - point2).cross(point0 - point1)).normalize();
        self.dist = self.planepts[1].dot(self.normal);                    
        


    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method __add__()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    def __add__(self, other):
        if isinstance(other, Vector3):
            return Vector3(self.x + other.x, self.y + other.y, self.z + other.z)
        else:
            raise TypeError("Unsupported operand type. Expected Vector3.")
        

    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method __sub__()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    def __sub__(self, other):
        if isinstance(other, Vector3):
            return Vector3(self.x - other.x, self.y - other.y, self.z - other.z)
        else:
            raise TypeError("Unsupported operand type. Expected Vector3.")

    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #// 
    #//  Method __str__()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    def __str__(self):
        return f"({self.x}, {self.y}, {self.z})"

    