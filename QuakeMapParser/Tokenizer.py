
#//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#//
#//  Class Token()
#//
#//  This class represents a single token. 
#//
#// 
#//
#//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


class Token:


    #token type enumerations
    class TokenType:
        TOKEN_NULL                 = 0
        TOKEN_EOF                  = 1
        TOKEN_ID                   = 2
        TOKEN_STRING               = 3
        TOKEN_INT                  = 4
        TOKEN_WHITESPACE           = 5
        TOKEN_EQUALS               = 6
        TOKEN_SEMI                 = 7
        TOKEN_LPAREN               = 8
        TOKEN_RPAREN               = 9
        TOKEN_LBRACE               = 10
        TOKEN_RBRACE               = 11
        TOKEN_LBRACKET             = 12
        TOKEN_RBRACKET             = 13
        TOKEN_COLON                = 14
        TOKEN_COMMA                = 15
        TOKEN_BACKWARD_SLASH       = 16
        TOKEN_LT                   = 17
        TOKEN_GT                   = 18
        TOKEN_FORWARD_SLASH        = 19
        TOKEN_ASTERISK             = 20
        TOKEN_MINUS                = 21
        TOKEN_PLUS                 = 22
        TOKEN_TILDE                = 23
        TOKEN_EXCLAMATION_MARK     = 24
        TOKEN_AT                   = 25
        TOKEN_POUND                = 26
        TOKEN_DOLLAR               = 27
        TOKEN_PERCENT              = 28
        TOKEN_CARET                = 29
        TOKEN_AMPERSAND            = 30
        TOKEN_PERIOD               = 31
        TOKEN_QUESTION_MARK        = 32
        TOKEN_BACKTICK             = 33
        TOKEN_SINGLE_QUOTE         = 34
        TOKEN_PIPE                 = 35



    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Class CTORS/DTORS()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    def __init__(self, tokenType, value):
        self.tokenType = tokenType           # one of the enumerations in the Token class
        self.value = value                   # string representation of the token

  
        





#//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#//
#//  Class Tokenizer()
#//
#//  This class takes a stream as an input and by calling the getNextToken method, it will return the next token in the stream. 
#//  This sting of tokens can then be fed to a parser 
#//
#//
#//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Tokenizer:

    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Class CTORS/DTORS()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    def __init__(self, stream, filesize):
        self.stream = stream
        self.streamlength = filesize
        c = self.stream.read(1)
        self.currentchar = c
        self.m_whitespaceenabled = False
        self.cursorpos = 0

    def __del__(self):
        pass

    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method __iter__()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    def __iter__(self):
        return self

    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method __next__()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    def __next__(self):
        token = self.getNextToken()
        if token.tokenType is Token.TokenType.TOKEN_EOF:
            return None
        else:
            return token


    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method get_next_token()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    def getNextToken(self):
        #while self.currentchar != '\0':

        if self.currentchar == '':
            return Token(Token.TokenType.TOKEN_EOF, '')

        if self.skip_whitespace() and self.m_whitespaceenabled:
            return Token(Token.TokenType.TOKEN_WHITESPACE, " ")

        if self.currentchar.isalpha() or self.currentchar == '_':
            return self.parse_id()

        if self.currentchar == '"':
            return self.parse_string()

        if self.currentchar.isdigit():
            return self.parse_number()

        switch = {
            '=': Token.TokenType.TOKEN_EQUALS,
            ';': Token.TokenType.TOKEN_SEMI,
            '(': Token.TokenType.TOKEN_LPAREN,
            ')': Token.TokenType.TOKEN_RPAREN,
            '{': Token.TokenType.TOKEN_LBRACE,
            '}': Token.TokenType.TOKEN_RBRACE,
            '[': Token.TokenType.TOKEN_LBRACKET,
            ']': Token.TokenType.TOKEN_RBRACKET,
            ':': Token.TokenType.TOKEN_COLON,
            ',': Token.TokenType.TOKEN_COMMA,
            '\\': Token.TokenType.TOKEN_BACKWARD_SLASH,
            '<': Token.TokenType.TOKEN_LT,
            '>': Token.TokenType.TOKEN_GT,
            '/': Token.TokenType.TOKEN_FORWARD_SLASH,
            '*': Token.TokenType.TOKEN_ASTERISK,
            '-': Token.TokenType.TOKEN_MINUS,
            '+': Token.TokenType.TOKEN_PLUS,
            '~': Token.TokenType.TOKEN_TILDE,
            '!': Token.TokenType.TOKEN_EXCLAMATION_MARK,
            '@': Token.TokenType.TOKEN_AT,
            '#': Token.TokenType.TOKEN_POUND,
            '$': Token.TokenType.TOKEN_DOLLAR,
            '%': Token.TokenType.TOKEN_PERCENT,
            '^': Token.TokenType.TOKEN_CARET,
            '&': Token.TokenType.TOKEN_AMPERSAND,
            '.': Token.TokenType.TOKEN_PERIOD,
            '?': Token.TokenType.TOKEN_QUESTION_MARK,
            '`': Token.TokenType.TOKEN_BACKTICK,
            '\'': Token.TokenType.TOKEN_SINGLE_QUOTE,
            '|': Token.TokenType.TOKEN_PIPE,
            '': Token.TokenType.TOKEN_EOF
        }

        if self.currentchar in switch:                
            return self.advance_with_token(Token(switch[self.currentchar], self.currentchar))  #return the tokentype and the actual token
        else:
            print("Unexpected character found:", self.currentchar)
            exit(1)

        return Token(Token.TokenType.TOKEN_EOF, self.currentchar)

    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method advance()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    def advance(self):
        if self.currentchar != '\0' and self.cursorpos < self.streamlength:
            self.cursorpos += 1
            c = self.stream.read(1)
            self.currentchar = c
        else:
            self.currentchar = '\0'

    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method skip_whitespace()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    def skip_whitespace(self):
        skipped = False
        while self.currentchar == ' ' or self.currentchar == '\n' or self.currentchar == '\r' or self.currentchar == '\t':
            self.advance()
            skipped = True
        return skipped

    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method advance_with_token()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    def advance_with_token(self, token):
        self.advance()
        return token
    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method parse_id()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    def parse_id(self):
        s = ""
        while self.currentchar.isalnum() or self.currentchar == '_':
            s += self.currentchar
            self.advance()
        return Token(Token.TokenType.TOKEN_ID, s)
    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method parse_string()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    def parse_string(self):
        self.advance()
        s = ""
        while self.currentchar != '"':
            s += self.currentchar
            self.advance()
        self.advance()
        return Token(Token.TokenType.TOKEN_STRING, s)
    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method parse_number()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    def parse_number(self):
        s = ""
        while self.currentchar.isdigit():
            s += self.currentchar
            self.advance()
        return Token(Token.TokenType.TOKEN_INT, s)
    
        
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method enable_whitespace()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    def enable_whitespace(self):
        self.m_whitespaceenabled = True
    
        
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//
    #//  Method disable_whitespace()
    #//    
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    def disable_whitespace(self):
        self.m_whitespaceenabled = False
